`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    19:18:45 01/20/2025 
// Design Name: 
// Module Name:    basicgates 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////

// Full Adder
module full_adder(input a, input b, input cin, output sum, output cout);
    assign sum = a ^ b ^ cin;
    assign cout = (a & b) | (cin & (a ^ b));
endmodule

// 4-bit Ripple Carry Adder
module ripple_carry_adder(input [3:0] A, input [3:0] B, input cin, output [3:0] sum, output cout);
    wire c1, c2, c3;

    full_adder fa0 (A[0], B[0], cin, sum[0], c1);
    full_adder fa1 (A[1], B[1], c1, sum[1], c2);
    full_adder fa2 (A[2], B[2], c2, sum[2], c3);
    full_adder fa3 (A[3], B[3], c3, sum[3], cout);
endmodule

// 2:1 Multiplexer
module mux2_1(input in1, input in2, input select, output out);
    assign out = select ? in2 : in1;
endmodule

// 4:1 Multiplexer using two 2:1 multiplexers
module mux4_1(input [3:0] in, input [1:0] select, output out);
    wire m0_out, m1_out;

    mux2_1 m0(in[0], in[1], select[0], m0_out);
    mux2_1 m1(in[2], in[3], select[0], m1_out);
    mux2_1 m_final(m0_out, m1_out, select[1], out);
endmodule

// Testbench for all modules
module testbench;
    reg a, b;
    reg [3:0] A, B;
    reg cin;
    reg [3:0] mux_in;
    reg [1:0] select;
    
    wire and_out;
    wire [3:0] sum;
    wire cout;
    wire mux_out;

    // Instantiate the Ripple Carry Adder
    ripple_carry_adder uut_ripple (.A(A), .B(B), .cin(cin), .sum(sum), .cout(cout));

    // Instantiate the 4:1 Multiplexer
    mux4_1 uut_mux (.in(mux_in), .select(select), .out(mux_out));

    initial begin
        // Test AND gate
        $display("Testing AND Gate:");
        for (a = 0; a <= 1; a = a + 1) begin
            for (b = 0; b <= 1; b = b + 1) begin
                #10; // Wait for 10 time units
                $display("a=%b b=%b => and_out=%b", a, b, and_out);
            end
        end

        // Test Ripple Carry Adder
        $display("\nTesting Ripple Carry Adder:");
        A = 4'b1010; B = 4'b0101; cin = 0; #10;
        $display("A=%b B=%b cin=%b => sum=%b cout=%b", A, B, cin, sum, cout);

        A = 4'b1111; B = 4'b0001; cin = 0; #10;
        $display("A=%b B=%b cin=%b => sum=%b cout=%b", A, B, cin, sum, cout);

        // Test Multiplexer
        $display("\nTesting Multiplexer:");
        mux_in = 4'b1100; select = 2'b00; #10;
        $display("mux_in=%b select=%b => mux_out=%b", mux_in, select, mux_out);

        select = 2'b01; #10;
        $display("mux_in=%b select=%b => mux_out=%b", mux_in, select, mux_out);

        select = 2'b10; #10;
        $display("mux_in=%b select=%b => mux_out=%b", mux_in, select, mux_out);

        select = 2'b11; #10;
        $display("mux_in=%b select=%b => mux_out=%b", mux_in, select, mux_out);

        $finish; // End simulation
    end
endmodule

